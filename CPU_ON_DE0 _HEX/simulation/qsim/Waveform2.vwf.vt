// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2023 12:37:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU_ON_DE0
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_ON_DE0_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_ON_DE0_vlg_check_tst (
	aBusX,
	accX,
	aluX,
	dBusX,
	iarX,
	iregX,
	mem_enX,
	mem_rwX,
	pcX,
	tX,
	sampler_rx
);
input [15:0] aBusX;
input [15:0] accX;
input [15:0] aluX;
input [15:0] dBusX;
input [15:0] iarX;
input [15:0] iregX;
input  mem_enX;
input  mem_rwX;
input [15:0] pcX;
input [2:0] tX;
input sampler_rx;

reg [15:0] aBusX_expected;
reg [15:0] accX_expected;
reg [15:0] aluX_expected;
reg [15:0] dBusX_expected;
reg [15:0] iarX_expected;
reg [15:0] iregX_expected;
reg  mem_enX_expected;
reg  mem_rwX_expected;
reg [15:0] pcX_expected;
reg [2:0] tX_expected;

reg [15:0] aBusX_prev;
reg [15:0] accX_prev;
reg [15:0] aluX_prev;
reg [15:0] dBusX_prev;
reg [15:0] iarX_prev;
reg [15:0] iregX_prev;
reg  mem_enX_prev;
reg  mem_rwX_prev;
reg [15:0] pcX_prev;
reg [2:0] tX_prev;

reg [15:0] aBusX_expected_prev;
reg [15:0] accX_expected_prev;
reg [15:0] aluX_expected_prev;
reg [15:0] dBusX_expected_prev;
reg [15:0] iarX_expected_prev;
reg [15:0] iregX_expected_prev;
reg  mem_enX_expected_prev;
reg  mem_rwX_expected_prev;
reg [15:0] pcX_expected_prev;
reg [2:0] tX_expected_prev;

reg [15:0] last_aBusX_exp;
reg [15:0] last_accX_exp;
reg [15:0] last_aluX_exp;
reg [15:0] last_dBusX_exp;
reg [15:0] last_iarX_exp;
reg [15:0] last_iregX_exp;
reg  last_mem_enX_exp;
reg  last_mem_rwX_exp;
reg [15:0] last_pcX_exp;
reg [2:0] last_tX_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	aBusX_prev = aBusX;
	accX_prev = accX;
	aluX_prev = aluX;
	dBusX_prev = dBusX;
	iarX_prev = iarX;
	iregX_prev = iregX;
	mem_enX_prev = mem_enX;
	mem_rwX_prev = mem_rwX;
	pcX_prev = pcX;
	tX_prev = tX;
end

// update expected /o prevs

always @(trigger)
begin
	aBusX_expected_prev = aBusX_expected;
	accX_expected_prev = accX_expected;
	aluX_expected_prev = aluX_expected;
	dBusX_expected_prev = dBusX_expected;
	iarX_expected_prev = iarX_expected;
	iregX_expected_prev = iregX_expected;
	mem_enX_expected_prev = mem_enX_expected;
	mem_rwX_expected_prev = mem_rwX_expected;
	pcX_expected_prev = pcX_expected;
	tX_expected_prev = tX_expected;
end


// expected aBusX[ 15 ]
initial
begin
	aBusX_expected[15] = 1'bX;
end 
// expected aBusX[ 14 ]
initial
begin
	aBusX_expected[14] = 1'bX;
end 
// expected aBusX[ 13 ]
initial
begin
	aBusX_expected[13] = 1'bX;
end 
// expected aBusX[ 12 ]
initial
begin
	aBusX_expected[12] = 1'bX;
end 
// expected aBusX[ 11 ]
initial
begin
	aBusX_expected[11] = 1'bX;
end 
// expected aBusX[ 10 ]
initial
begin
	aBusX_expected[10] = 1'bX;
end 
// expected aBusX[ 9 ]
initial
begin
	aBusX_expected[9] = 1'bX;
end 
// expected aBusX[ 8 ]
initial
begin
	aBusX_expected[8] = 1'bX;
end 
// expected aBusX[ 7 ]
initial
begin
	aBusX_expected[7] = 1'bX;
end 
// expected aBusX[ 6 ]
initial
begin
	aBusX_expected[6] = 1'bX;
end 
// expected aBusX[ 5 ]
initial
begin
	aBusX_expected[5] = 1'bX;
end 
// expected aBusX[ 4 ]
initial
begin
	aBusX_expected[4] = 1'bX;
end 
// expected aBusX[ 3 ]
initial
begin
	aBusX_expected[3] = 1'bX;
end 
// expected aBusX[ 2 ]
initial
begin
	aBusX_expected[2] = 1'bX;
end 
// expected aBusX[ 1 ]
initial
begin
	aBusX_expected[1] = 1'bX;
end 
// expected aBusX[ 0 ]
initial
begin
	aBusX_expected[0] = 1'bX;
end 
// expected accX[ 15 ]
initial
begin
	accX_expected[15] = 1'bX;
end 
// expected accX[ 14 ]
initial
begin
	accX_expected[14] = 1'bX;
end 
// expected accX[ 13 ]
initial
begin
	accX_expected[13] = 1'bX;
end 
// expected accX[ 12 ]
initial
begin
	accX_expected[12] = 1'bX;
end 
// expected accX[ 11 ]
initial
begin
	accX_expected[11] = 1'bX;
end 
// expected accX[ 10 ]
initial
begin
	accX_expected[10] = 1'bX;
end 
// expected accX[ 9 ]
initial
begin
	accX_expected[9] = 1'bX;
end 
// expected accX[ 8 ]
initial
begin
	accX_expected[8] = 1'bX;
end 
// expected accX[ 7 ]
initial
begin
	accX_expected[7] = 1'bX;
end 
// expected accX[ 6 ]
initial
begin
	accX_expected[6] = 1'bX;
end 
// expected accX[ 5 ]
initial
begin
	accX_expected[5] = 1'bX;
end 
// expected accX[ 4 ]
initial
begin
	accX_expected[4] = 1'bX;
end 
// expected accX[ 3 ]
initial
begin
	accX_expected[3] = 1'bX;
end 
// expected accX[ 2 ]
initial
begin
	accX_expected[2] = 1'bX;
end 
// expected accX[ 1 ]
initial
begin
	accX_expected[1] = 1'bX;
end 
// expected accX[ 0 ]
initial
begin
	accX_expected[0] = 1'bX;
end 
// expected aluX[ 15 ]
initial
begin
	aluX_expected[15] = 1'bX;
end 
// expected aluX[ 14 ]
initial
begin
	aluX_expected[14] = 1'bX;
end 
// expected aluX[ 13 ]
initial
begin
	aluX_expected[13] = 1'bX;
end 
// expected aluX[ 12 ]
initial
begin
	aluX_expected[12] = 1'bX;
end 
// expected aluX[ 11 ]
initial
begin
	aluX_expected[11] = 1'bX;
end 
// expected aluX[ 10 ]
initial
begin
	aluX_expected[10] = 1'bX;
end 
// expected aluX[ 9 ]
initial
begin
	aluX_expected[9] = 1'bX;
end 
// expected aluX[ 8 ]
initial
begin
	aluX_expected[8] = 1'bX;
end 
// expected aluX[ 7 ]
initial
begin
	aluX_expected[7] = 1'bX;
end 
// expected aluX[ 6 ]
initial
begin
	aluX_expected[6] = 1'bX;
end 
// expected aluX[ 5 ]
initial
begin
	aluX_expected[5] = 1'bX;
end 
// expected aluX[ 4 ]
initial
begin
	aluX_expected[4] = 1'bX;
end 
// expected aluX[ 3 ]
initial
begin
	aluX_expected[3] = 1'bX;
end 
// expected aluX[ 2 ]
initial
begin
	aluX_expected[2] = 1'bX;
end 
// expected aluX[ 1 ]
initial
begin
	aluX_expected[1] = 1'bX;
end 
// expected aluX[ 0 ]
initial
begin
	aluX_expected[0] = 1'bX;
end 
// expected dBusX[ 15 ]
initial
begin
	dBusX_expected[15] = 1'bX;
end 
// expected dBusX[ 14 ]
initial
begin
	dBusX_expected[14] = 1'bX;
end 
// expected dBusX[ 13 ]
initial
begin
	dBusX_expected[13] = 1'bX;
end 
// expected dBusX[ 12 ]
initial
begin
	dBusX_expected[12] = 1'bX;
end 
// expected dBusX[ 11 ]
initial
begin
	dBusX_expected[11] = 1'bX;
end 
// expected dBusX[ 10 ]
initial
begin
	dBusX_expected[10] = 1'bX;
end 
// expected dBusX[ 9 ]
initial
begin
	dBusX_expected[9] = 1'bX;
end 
// expected dBusX[ 8 ]
initial
begin
	dBusX_expected[8] = 1'bX;
end 
// expected dBusX[ 7 ]
initial
begin
	dBusX_expected[7] = 1'bX;
end 
// expected dBusX[ 6 ]
initial
begin
	dBusX_expected[6] = 1'bX;
end 
// expected dBusX[ 5 ]
initial
begin
	dBusX_expected[5] = 1'bX;
end 
// expected dBusX[ 4 ]
initial
begin
	dBusX_expected[4] = 1'bX;
end 
// expected dBusX[ 3 ]
initial
begin
	dBusX_expected[3] = 1'bX;
end 
// expected dBusX[ 2 ]
initial
begin
	dBusX_expected[2] = 1'bX;
end 
// expected dBusX[ 1 ]
initial
begin
	dBusX_expected[1] = 1'bX;
end 
// expected dBusX[ 0 ]
initial
begin
	dBusX_expected[0] = 1'bX;
end 
// expected iarX[ 15 ]
initial
begin
	iarX_expected[15] = 1'bX;
end 
// expected iarX[ 14 ]
initial
begin
	iarX_expected[14] = 1'bX;
end 
// expected iarX[ 13 ]
initial
begin
	iarX_expected[13] = 1'bX;
end 
// expected iarX[ 12 ]
initial
begin
	iarX_expected[12] = 1'bX;
end 
// expected iarX[ 11 ]
initial
begin
	iarX_expected[11] = 1'bX;
end 
// expected iarX[ 10 ]
initial
begin
	iarX_expected[10] = 1'bX;
end 
// expected iarX[ 9 ]
initial
begin
	iarX_expected[9] = 1'bX;
end 
// expected iarX[ 8 ]
initial
begin
	iarX_expected[8] = 1'bX;
end 
// expected iarX[ 7 ]
initial
begin
	iarX_expected[7] = 1'bX;
end 
// expected iarX[ 6 ]
initial
begin
	iarX_expected[6] = 1'bX;
end 
// expected iarX[ 5 ]
initial
begin
	iarX_expected[5] = 1'bX;
end 
// expected iarX[ 4 ]
initial
begin
	iarX_expected[4] = 1'bX;
end 
// expected iarX[ 3 ]
initial
begin
	iarX_expected[3] = 1'bX;
end 
// expected iarX[ 2 ]
initial
begin
	iarX_expected[2] = 1'bX;
end 
// expected iarX[ 1 ]
initial
begin
	iarX_expected[1] = 1'bX;
end 
// expected iarX[ 0 ]
initial
begin
	iarX_expected[0] = 1'bX;
end 
// expected iregX[ 15 ]
initial
begin
	iregX_expected[15] = 1'bX;
end 
// expected iregX[ 14 ]
initial
begin
	iregX_expected[14] = 1'bX;
end 
// expected iregX[ 13 ]
initial
begin
	iregX_expected[13] = 1'bX;
end 
// expected iregX[ 12 ]
initial
begin
	iregX_expected[12] = 1'bX;
end 
// expected iregX[ 11 ]
initial
begin
	iregX_expected[11] = 1'bX;
end 
// expected iregX[ 10 ]
initial
begin
	iregX_expected[10] = 1'bX;
end 
// expected iregX[ 9 ]
initial
begin
	iregX_expected[9] = 1'bX;
end 
// expected iregX[ 8 ]
initial
begin
	iregX_expected[8] = 1'bX;
end 
// expected iregX[ 7 ]
initial
begin
	iregX_expected[7] = 1'bX;
end 
// expected iregX[ 6 ]
initial
begin
	iregX_expected[6] = 1'bX;
end 
// expected iregX[ 5 ]
initial
begin
	iregX_expected[5] = 1'bX;
end 
// expected iregX[ 4 ]
initial
begin
	iregX_expected[4] = 1'bX;
end 
// expected iregX[ 3 ]
initial
begin
	iregX_expected[3] = 1'bX;
end 
// expected iregX[ 2 ]
initial
begin
	iregX_expected[2] = 1'bX;
end 
// expected iregX[ 1 ]
initial
begin
	iregX_expected[1] = 1'bX;
end 
// expected iregX[ 0 ]
initial
begin
	iregX_expected[0] = 1'bX;
end 

// expected mem_enX
initial
begin
	mem_enX_expected = 1'bX;
end 

// expected mem_rwX
initial
begin
	mem_rwX_expected = 1'bX;
end 
// expected pcX[ 15 ]
initial
begin
	pcX_expected[15] = 1'bX;
end 
// expected pcX[ 14 ]
initial
begin
	pcX_expected[14] = 1'bX;
end 
// expected pcX[ 13 ]
initial
begin
	pcX_expected[13] = 1'bX;
end 
// expected pcX[ 12 ]
initial
begin
	pcX_expected[12] = 1'bX;
end 
// expected pcX[ 11 ]
initial
begin
	pcX_expected[11] = 1'bX;
end 
// expected pcX[ 10 ]
initial
begin
	pcX_expected[10] = 1'bX;
end 
// expected pcX[ 9 ]
initial
begin
	pcX_expected[9] = 1'bX;
end 
// expected pcX[ 8 ]
initial
begin
	pcX_expected[8] = 1'bX;
end 
// expected pcX[ 7 ]
initial
begin
	pcX_expected[7] = 1'bX;
end 
// expected pcX[ 6 ]
initial
begin
	pcX_expected[6] = 1'bX;
end 
// expected pcX[ 5 ]
initial
begin
	pcX_expected[5] = 1'bX;
end 
// expected pcX[ 4 ]
initial
begin
	pcX_expected[4] = 1'bX;
end 
// expected pcX[ 3 ]
initial
begin
	pcX_expected[3] = 1'bX;
end 
// expected pcX[ 2 ]
initial
begin
	pcX_expected[2] = 1'bX;
end 
// expected pcX[ 1 ]
initial
begin
	pcX_expected[1] = 1'bX;
end 
// expected pcX[ 0 ]
initial
begin
	pcX_expected[0] = 1'bX;
end 
// expected tX[ 2 ]
initial
begin
	tX_expected[2] = 1'bX;
end 
// expected tX[ 1 ]
initial
begin
	tX_expected[1] = 1'bX;
end 
// expected tX[ 0 ]
initial
begin
	tX_expected[0] = 1'bX;
end 
// generate trigger
always @(aBusX_expected or aBusX or accX_expected or accX or aluX_expected or aluX or dBusX_expected or dBusX or iarX_expected or iarX or iregX_expected or iregX or mem_enX_expected or mem_enX or mem_rwX_expected or mem_rwX or pcX_expected or pcX or tX_expected or tX)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aBusX = %b | expected accX = %b | expected aluX = %b | expected dBusX = %b | expected iarX = %b | expected iregX = %b | expected mem_enX = %b | expected mem_rwX = %b | expected pcX = %b | expected tX = %b | ",aBusX_expected_prev,accX_expected_prev,aluX_expected_prev,dBusX_expected_prev,iarX_expected_prev,iregX_expected_prev,mem_enX_expected_prev,mem_rwX_expected_prev,pcX_expected_prev,tX_expected_prev);
	$display("| real aBusX = %b | real accX = %b | real aluX = %b | real dBusX = %b | real iarX = %b | real iregX = %b | real mem_enX = %b | real mem_rwX = %b | real pcX = %b | real tX = %b | ",aBusX_prev,accX_prev,aluX_prev,dBusX_prev,iarX_prev,iregX_prev,mem_enX_prev,mem_rwX_prev,pcX_prev,tX_prev);
`endif
	if (
		( aBusX_expected_prev[0] !== 1'bx ) && ( aBusX_prev[0] !== aBusX_expected_prev[0] )
		&& ((aBusX_expected_prev[0] !== last_aBusX_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[0] = aBusX_expected_prev[0];
	end
	if (
		( aBusX_expected_prev[1] !== 1'bx ) && ( aBusX_prev[1] !== aBusX_expected_prev[1] )
		&& ((aBusX_expected_prev[1] !== last_aBusX_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[1] = aBusX_expected_prev[1];
	end
	if (
		( aBusX_expected_prev[2] !== 1'bx ) && ( aBusX_prev[2] !== aBusX_expected_prev[2] )
		&& ((aBusX_expected_prev[2] !== last_aBusX_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[2] = aBusX_expected_prev[2];
	end
	if (
		( aBusX_expected_prev[3] !== 1'bx ) && ( aBusX_prev[3] !== aBusX_expected_prev[3] )
		&& ((aBusX_expected_prev[3] !== last_aBusX_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[3] = aBusX_expected_prev[3];
	end
	if (
		( aBusX_expected_prev[4] !== 1'bx ) && ( aBusX_prev[4] !== aBusX_expected_prev[4] )
		&& ((aBusX_expected_prev[4] !== last_aBusX_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[4] = aBusX_expected_prev[4];
	end
	if (
		( aBusX_expected_prev[5] !== 1'bx ) && ( aBusX_prev[5] !== aBusX_expected_prev[5] )
		&& ((aBusX_expected_prev[5] !== last_aBusX_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[5] = aBusX_expected_prev[5];
	end
	if (
		( aBusX_expected_prev[6] !== 1'bx ) && ( aBusX_prev[6] !== aBusX_expected_prev[6] )
		&& ((aBusX_expected_prev[6] !== last_aBusX_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[6] = aBusX_expected_prev[6];
	end
	if (
		( aBusX_expected_prev[7] !== 1'bx ) && ( aBusX_prev[7] !== aBusX_expected_prev[7] )
		&& ((aBusX_expected_prev[7] !== last_aBusX_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[7] = aBusX_expected_prev[7];
	end
	if (
		( aBusX_expected_prev[8] !== 1'bx ) && ( aBusX_prev[8] !== aBusX_expected_prev[8] )
		&& ((aBusX_expected_prev[8] !== last_aBusX_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[8] = aBusX_expected_prev[8];
	end
	if (
		( aBusX_expected_prev[9] !== 1'bx ) && ( aBusX_prev[9] !== aBusX_expected_prev[9] )
		&& ((aBusX_expected_prev[9] !== last_aBusX_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[9] = aBusX_expected_prev[9];
	end
	if (
		( aBusX_expected_prev[10] !== 1'bx ) && ( aBusX_prev[10] !== aBusX_expected_prev[10] )
		&& ((aBusX_expected_prev[10] !== last_aBusX_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[10] = aBusX_expected_prev[10];
	end
	if (
		( aBusX_expected_prev[11] !== 1'bx ) && ( aBusX_prev[11] !== aBusX_expected_prev[11] )
		&& ((aBusX_expected_prev[11] !== last_aBusX_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[11] = aBusX_expected_prev[11];
	end
	if (
		( aBusX_expected_prev[12] !== 1'bx ) && ( aBusX_prev[12] !== aBusX_expected_prev[12] )
		&& ((aBusX_expected_prev[12] !== last_aBusX_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[12] = aBusX_expected_prev[12];
	end
	if (
		( aBusX_expected_prev[13] !== 1'bx ) && ( aBusX_prev[13] !== aBusX_expected_prev[13] )
		&& ((aBusX_expected_prev[13] !== last_aBusX_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[13] = aBusX_expected_prev[13];
	end
	if (
		( aBusX_expected_prev[14] !== 1'bx ) && ( aBusX_prev[14] !== aBusX_expected_prev[14] )
		&& ((aBusX_expected_prev[14] !== last_aBusX_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[14] = aBusX_expected_prev[14];
	end
	if (
		( aBusX_expected_prev[15] !== 1'bx ) && ( aBusX_prev[15] !== aBusX_expected_prev[15] )
		&& ((aBusX_expected_prev[15] !== last_aBusX_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aBusX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aBusX_expected_prev);
		$display ("     Real value = %b", aBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aBusX_exp[15] = aBusX_expected_prev[15];
	end
	if (
		( accX_expected_prev[0] !== 1'bx ) && ( accX_prev[0] !== accX_expected_prev[0] )
		&& ((accX_expected_prev[0] !== last_accX_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[0] = accX_expected_prev[0];
	end
	if (
		( accX_expected_prev[1] !== 1'bx ) && ( accX_prev[1] !== accX_expected_prev[1] )
		&& ((accX_expected_prev[1] !== last_accX_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[1] = accX_expected_prev[1];
	end
	if (
		( accX_expected_prev[2] !== 1'bx ) && ( accX_prev[2] !== accX_expected_prev[2] )
		&& ((accX_expected_prev[2] !== last_accX_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[2] = accX_expected_prev[2];
	end
	if (
		( accX_expected_prev[3] !== 1'bx ) && ( accX_prev[3] !== accX_expected_prev[3] )
		&& ((accX_expected_prev[3] !== last_accX_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[3] = accX_expected_prev[3];
	end
	if (
		( accX_expected_prev[4] !== 1'bx ) && ( accX_prev[4] !== accX_expected_prev[4] )
		&& ((accX_expected_prev[4] !== last_accX_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[4] = accX_expected_prev[4];
	end
	if (
		( accX_expected_prev[5] !== 1'bx ) && ( accX_prev[5] !== accX_expected_prev[5] )
		&& ((accX_expected_prev[5] !== last_accX_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[5] = accX_expected_prev[5];
	end
	if (
		( accX_expected_prev[6] !== 1'bx ) && ( accX_prev[6] !== accX_expected_prev[6] )
		&& ((accX_expected_prev[6] !== last_accX_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[6] = accX_expected_prev[6];
	end
	if (
		( accX_expected_prev[7] !== 1'bx ) && ( accX_prev[7] !== accX_expected_prev[7] )
		&& ((accX_expected_prev[7] !== last_accX_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[7] = accX_expected_prev[7];
	end
	if (
		( accX_expected_prev[8] !== 1'bx ) && ( accX_prev[8] !== accX_expected_prev[8] )
		&& ((accX_expected_prev[8] !== last_accX_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[8] = accX_expected_prev[8];
	end
	if (
		( accX_expected_prev[9] !== 1'bx ) && ( accX_prev[9] !== accX_expected_prev[9] )
		&& ((accX_expected_prev[9] !== last_accX_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[9] = accX_expected_prev[9];
	end
	if (
		( accX_expected_prev[10] !== 1'bx ) && ( accX_prev[10] !== accX_expected_prev[10] )
		&& ((accX_expected_prev[10] !== last_accX_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[10] = accX_expected_prev[10];
	end
	if (
		( accX_expected_prev[11] !== 1'bx ) && ( accX_prev[11] !== accX_expected_prev[11] )
		&& ((accX_expected_prev[11] !== last_accX_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[11] = accX_expected_prev[11];
	end
	if (
		( accX_expected_prev[12] !== 1'bx ) && ( accX_prev[12] !== accX_expected_prev[12] )
		&& ((accX_expected_prev[12] !== last_accX_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[12] = accX_expected_prev[12];
	end
	if (
		( accX_expected_prev[13] !== 1'bx ) && ( accX_prev[13] !== accX_expected_prev[13] )
		&& ((accX_expected_prev[13] !== last_accX_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[13] = accX_expected_prev[13];
	end
	if (
		( accX_expected_prev[14] !== 1'bx ) && ( accX_prev[14] !== accX_expected_prev[14] )
		&& ((accX_expected_prev[14] !== last_accX_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[14] = accX_expected_prev[14];
	end
	if (
		( accX_expected_prev[15] !== 1'bx ) && ( accX_prev[15] !== accX_expected_prev[15] )
		&& ((accX_expected_prev[15] !== last_accX_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accX_expected_prev);
		$display ("     Real value = %b", accX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accX_exp[15] = accX_expected_prev[15];
	end
	if (
		( aluX_expected_prev[0] !== 1'bx ) && ( aluX_prev[0] !== aluX_expected_prev[0] )
		&& ((aluX_expected_prev[0] !== last_aluX_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[0] = aluX_expected_prev[0];
	end
	if (
		( aluX_expected_prev[1] !== 1'bx ) && ( aluX_prev[1] !== aluX_expected_prev[1] )
		&& ((aluX_expected_prev[1] !== last_aluX_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[1] = aluX_expected_prev[1];
	end
	if (
		( aluX_expected_prev[2] !== 1'bx ) && ( aluX_prev[2] !== aluX_expected_prev[2] )
		&& ((aluX_expected_prev[2] !== last_aluX_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[2] = aluX_expected_prev[2];
	end
	if (
		( aluX_expected_prev[3] !== 1'bx ) && ( aluX_prev[3] !== aluX_expected_prev[3] )
		&& ((aluX_expected_prev[3] !== last_aluX_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[3] = aluX_expected_prev[3];
	end
	if (
		( aluX_expected_prev[4] !== 1'bx ) && ( aluX_prev[4] !== aluX_expected_prev[4] )
		&& ((aluX_expected_prev[4] !== last_aluX_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[4] = aluX_expected_prev[4];
	end
	if (
		( aluX_expected_prev[5] !== 1'bx ) && ( aluX_prev[5] !== aluX_expected_prev[5] )
		&& ((aluX_expected_prev[5] !== last_aluX_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[5] = aluX_expected_prev[5];
	end
	if (
		( aluX_expected_prev[6] !== 1'bx ) && ( aluX_prev[6] !== aluX_expected_prev[6] )
		&& ((aluX_expected_prev[6] !== last_aluX_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[6] = aluX_expected_prev[6];
	end
	if (
		( aluX_expected_prev[7] !== 1'bx ) && ( aluX_prev[7] !== aluX_expected_prev[7] )
		&& ((aluX_expected_prev[7] !== last_aluX_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[7] = aluX_expected_prev[7];
	end
	if (
		( aluX_expected_prev[8] !== 1'bx ) && ( aluX_prev[8] !== aluX_expected_prev[8] )
		&& ((aluX_expected_prev[8] !== last_aluX_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[8] = aluX_expected_prev[8];
	end
	if (
		( aluX_expected_prev[9] !== 1'bx ) && ( aluX_prev[9] !== aluX_expected_prev[9] )
		&& ((aluX_expected_prev[9] !== last_aluX_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[9] = aluX_expected_prev[9];
	end
	if (
		( aluX_expected_prev[10] !== 1'bx ) && ( aluX_prev[10] !== aluX_expected_prev[10] )
		&& ((aluX_expected_prev[10] !== last_aluX_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[10] = aluX_expected_prev[10];
	end
	if (
		( aluX_expected_prev[11] !== 1'bx ) && ( aluX_prev[11] !== aluX_expected_prev[11] )
		&& ((aluX_expected_prev[11] !== last_aluX_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[11] = aluX_expected_prev[11];
	end
	if (
		( aluX_expected_prev[12] !== 1'bx ) && ( aluX_prev[12] !== aluX_expected_prev[12] )
		&& ((aluX_expected_prev[12] !== last_aluX_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[12] = aluX_expected_prev[12];
	end
	if (
		( aluX_expected_prev[13] !== 1'bx ) && ( aluX_prev[13] !== aluX_expected_prev[13] )
		&& ((aluX_expected_prev[13] !== last_aluX_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[13] = aluX_expected_prev[13];
	end
	if (
		( aluX_expected_prev[14] !== 1'bx ) && ( aluX_prev[14] !== aluX_expected_prev[14] )
		&& ((aluX_expected_prev[14] !== last_aluX_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[14] = aluX_expected_prev[14];
	end
	if (
		( aluX_expected_prev[15] !== 1'bx ) && ( aluX_prev[15] !== aluX_expected_prev[15] )
		&& ((aluX_expected_prev[15] !== last_aluX_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluX_expected_prev);
		$display ("     Real value = %b", aluX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aluX_exp[15] = aluX_expected_prev[15];
	end
	if (
		( dBusX_expected_prev[0] !== 1'bx ) && ( dBusX_prev[0] !== dBusX_expected_prev[0] )
		&& ((dBusX_expected_prev[0] !== last_dBusX_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[0] = dBusX_expected_prev[0];
	end
	if (
		( dBusX_expected_prev[1] !== 1'bx ) && ( dBusX_prev[1] !== dBusX_expected_prev[1] )
		&& ((dBusX_expected_prev[1] !== last_dBusX_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[1] = dBusX_expected_prev[1];
	end
	if (
		( dBusX_expected_prev[2] !== 1'bx ) && ( dBusX_prev[2] !== dBusX_expected_prev[2] )
		&& ((dBusX_expected_prev[2] !== last_dBusX_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[2] = dBusX_expected_prev[2];
	end
	if (
		( dBusX_expected_prev[3] !== 1'bx ) && ( dBusX_prev[3] !== dBusX_expected_prev[3] )
		&& ((dBusX_expected_prev[3] !== last_dBusX_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[3] = dBusX_expected_prev[3];
	end
	if (
		( dBusX_expected_prev[4] !== 1'bx ) && ( dBusX_prev[4] !== dBusX_expected_prev[4] )
		&& ((dBusX_expected_prev[4] !== last_dBusX_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[4] = dBusX_expected_prev[4];
	end
	if (
		( dBusX_expected_prev[5] !== 1'bx ) && ( dBusX_prev[5] !== dBusX_expected_prev[5] )
		&& ((dBusX_expected_prev[5] !== last_dBusX_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[5] = dBusX_expected_prev[5];
	end
	if (
		( dBusX_expected_prev[6] !== 1'bx ) && ( dBusX_prev[6] !== dBusX_expected_prev[6] )
		&& ((dBusX_expected_prev[6] !== last_dBusX_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[6] = dBusX_expected_prev[6];
	end
	if (
		( dBusX_expected_prev[7] !== 1'bx ) && ( dBusX_prev[7] !== dBusX_expected_prev[7] )
		&& ((dBusX_expected_prev[7] !== last_dBusX_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[7] = dBusX_expected_prev[7];
	end
	if (
		( dBusX_expected_prev[8] !== 1'bx ) && ( dBusX_prev[8] !== dBusX_expected_prev[8] )
		&& ((dBusX_expected_prev[8] !== last_dBusX_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[8] = dBusX_expected_prev[8];
	end
	if (
		( dBusX_expected_prev[9] !== 1'bx ) && ( dBusX_prev[9] !== dBusX_expected_prev[9] )
		&& ((dBusX_expected_prev[9] !== last_dBusX_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[9] = dBusX_expected_prev[9];
	end
	if (
		( dBusX_expected_prev[10] !== 1'bx ) && ( dBusX_prev[10] !== dBusX_expected_prev[10] )
		&& ((dBusX_expected_prev[10] !== last_dBusX_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[10] = dBusX_expected_prev[10];
	end
	if (
		( dBusX_expected_prev[11] !== 1'bx ) && ( dBusX_prev[11] !== dBusX_expected_prev[11] )
		&& ((dBusX_expected_prev[11] !== last_dBusX_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[11] = dBusX_expected_prev[11];
	end
	if (
		( dBusX_expected_prev[12] !== 1'bx ) && ( dBusX_prev[12] !== dBusX_expected_prev[12] )
		&& ((dBusX_expected_prev[12] !== last_dBusX_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[12] = dBusX_expected_prev[12];
	end
	if (
		( dBusX_expected_prev[13] !== 1'bx ) && ( dBusX_prev[13] !== dBusX_expected_prev[13] )
		&& ((dBusX_expected_prev[13] !== last_dBusX_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[13] = dBusX_expected_prev[13];
	end
	if (
		( dBusX_expected_prev[14] !== 1'bx ) && ( dBusX_prev[14] !== dBusX_expected_prev[14] )
		&& ((dBusX_expected_prev[14] !== last_dBusX_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[14] = dBusX_expected_prev[14];
	end
	if (
		( dBusX_expected_prev[15] !== 1'bx ) && ( dBusX_prev[15] !== dBusX_expected_prev[15] )
		&& ((dBusX_expected_prev[15] !== last_dBusX_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dBusX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dBusX_expected_prev);
		$display ("     Real value = %b", dBusX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dBusX_exp[15] = dBusX_expected_prev[15];
	end
	if (
		( iarX_expected_prev[0] !== 1'bx ) && ( iarX_prev[0] !== iarX_expected_prev[0] )
		&& ((iarX_expected_prev[0] !== last_iarX_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[0] = iarX_expected_prev[0];
	end
	if (
		( iarX_expected_prev[1] !== 1'bx ) && ( iarX_prev[1] !== iarX_expected_prev[1] )
		&& ((iarX_expected_prev[1] !== last_iarX_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[1] = iarX_expected_prev[1];
	end
	if (
		( iarX_expected_prev[2] !== 1'bx ) && ( iarX_prev[2] !== iarX_expected_prev[2] )
		&& ((iarX_expected_prev[2] !== last_iarX_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[2] = iarX_expected_prev[2];
	end
	if (
		( iarX_expected_prev[3] !== 1'bx ) && ( iarX_prev[3] !== iarX_expected_prev[3] )
		&& ((iarX_expected_prev[3] !== last_iarX_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[3] = iarX_expected_prev[3];
	end
	if (
		( iarX_expected_prev[4] !== 1'bx ) && ( iarX_prev[4] !== iarX_expected_prev[4] )
		&& ((iarX_expected_prev[4] !== last_iarX_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[4] = iarX_expected_prev[4];
	end
	if (
		( iarX_expected_prev[5] !== 1'bx ) && ( iarX_prev[5] !== iarX_expected_prev[5] )
		&& ((iarX_expected_prev[5] !== last_iarX_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[5] = iarX_expected_prev[5];
	end
	if (
		( iarX_expected_prev[6] !== 1'bx ) && ( iarX_prev[6] !== iarX_expected_prev[6] )
		&& ((iarX_expected_prev[6] !== last_iarX_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[6] = iarX_expected_prev[6];
	end
	if (
		( iarX_expected_prev[7] !== 1'bx ) && ( iarX_prev[7] !== iarX_expected_prev[7] )
		&& ((iarX_expected_prev[7] !== last_iarX_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[7] = iarX_expected_prev[7];
	end
	if (
		( iarX_expected_prev[8] !== 1'bx ) && ( iarX_prev[8] !== iarX_expected_prev[8] )
		&& ((iarX_expected_prev[8] !== last_iarX_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[8] = iarX_expected_prev[8];
	end
	if (
		( iarX_expected_prev[9] !== 1'bx ) && ( iarX_prev[9] !== iarX_expected_prev[9] )
		&& ((iarX_expected_prev[9] !== last_iarX_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[9] = iarX_expected_prev[9];
	end
	if (
		( iarX_expected_prev[10] !== 1'bx ) && ( iarX_prev[10] !== iarX_expected_prev[10] )
		&& ((iarX_expected_prev[10] !== last_iarX_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[10] = iarX_expected_prev[10];
	end
	if (
		( iarX_expected_prev[11] !== 1'bx ) && ( iarX_prev[11] !== iarX_expected_prev[11] )
		&& ((iarX_expected_prev[11] !== last_iarX_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[11] = iarX_expected_prev[11];
	end
	if (
		( iarX_expected_prev[12] !== 1'bx ) && ( iarX_prev[12] !== iarX_expected_prev[12] )
		&& ((iarX_expected_prev[12] !== last_iarX_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[12] = iarX_expected_prev[12];
	end
	if (
		( iarX_expected_prev[13] !== 1'bx ) && ( iarX_prev[13] !== iarX_expected_prev[13] )
		&& ((iarX_expected_prev[13] !== last_iarX_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[13] = iarX_expected_prev[13];
	end
	if (
		( iarX_expected_prev[14] !== 1'bx ) && ( iarX_prev[14] !== iarX_expected_prev[14] )
		&& ((iarX_expected_prev[14] !== last_iarX_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[14] = iarX_expected_prev[14];
	end
	if (
		( iarX_expected_prev[15] !== 1'bx ) && ( iarX_prev[15] !== iarX_expected_prev[15] )
		&& ((iarX_expected_prev[15] !== last_iarX_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iarX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iarX_expected_prev);
		$display ("     Real value = %b", iarX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_iarX_exp[15] = iarX_expected_prev[15];
	end
	if (
		( iregX_expected_prev[0] !== 1'bx ) && ( iregX_prev[0] !== iregX_expected_prev[0] )
		&& ((iregX_expected_prev[0] !== last_iregX_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[0] = iregX_expected_prev[0];
	end
	if (
		( iregX_expected_prev[1] !== 1'bx ) && ( iregX_prev[1] !== iregX_expected_prev[1] )
		&& ((iregX_expected_prev[1] !== last_iregX_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[1] = iregX_expected_prev[1];
	end
	if (
		( iregX_expected_prev[2] !== 1'bx ) && ( iregX_prev[2] !== iregX_expected_prev[2] )
		&& ((iregX_expected_prev[2] !== last_iregX_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[2] = iregX_expected_prev[2];
	end
	if (
		( iregX_expected_prev[3] !== 1'bx ) && ( iregX_prev[3] !== iregX_expected_prev[3] )
		&& ((iregX_expected_prev[3] !== last_iregX_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[3] = iregX_expected_prev[3];
	end
	if (
		( iregX_expected_prev[4] !== 1'bx ) && ( iregX_prev[4] !== iregX_expected_prev[4] )
		&& ((iregX_expected_prev[4] !== last_iregX_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[4] = iregX_expected_prev[4];
	end
	if (
		( iregX_expected_prev[5] !== 1'bx ) && ( iregX_prev[5] !== iregX_expected_prev[5] )
		&& ((iregX_expected_prev[5] !== last_iregX_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[5] = iregX_expected_prev[5];
	end
	if (
		( iregX_expected_prev[6] !== 1'bx ) && ( iregX_prev[6] !== iregX_expected_prev[6] )
		&& ((iregX_expected_prev[6] !== last_iregX_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[6] = iregX_expected_prev[6];
	end
	if (
		( iregX_expected_prev[7] !== 1'bx ) && ( iregX_prev[7] !== iregX_expected_prev[7] )
		&& ((iregX_expected_prev[7] !== last_iregX_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[7] = iregX_expected_prev[7];
	end
	if (
		( iregX_expected_prev[8] !== 1'bx ) && ( iregX_prev[8] !== iregX_expected_prev[8] )
		&& ((iregX_expected_prev[8] !== last_iregX_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[8] = iregX_expected_prev[8];
	end
	if (
		( iregX_expected_prev[9] !== 1'bx ) && ( iregX_prev[9] !== iregX_expected_prev[9] )
		&& ((iregX_expected_prev[9] !== last_iregX_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[9] = iregX_expected_prev[9];
	end
	if (
		( iregX_expected_prev[10] !== 1'bx ) && ( iregX_prev[10] !== iregX_expected_prev[10] )
		&& ((iregX_expected_prev[10] !== last_iregX_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[10] = iregX_expected_prev[10];
	end
	if (
		( iregX_expected_prev[11] !== 1'bx ) && ( iregX_prev[11] !== iregX_expected_prev[11] )
		&& ((iregX_expected_prev[11] !== last_iregX_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[11] = iregX_expected_prev[11];
	end
	if (
		( iregX_expected_prev[12] !== 1'bx ) && ( iregX_prev[12] !== iregX_expected_prev[12] )
		&& ((iregX_expected_prev[12] !== last_iregX_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[12] = iregX_expected_prev[12];
	end
	if (
		( iregX_expected_prev[13] !== 1'bx ) && ( iregX_prev[13] !== iregX_expected_prev[13] )
		&& ((iregX_expected_prev[13] !== last_iregX_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[13] = iregX_expected_prev[13];
	end
	if (
		( iregX_expected_prev[14] !== 1'bx ) && ( iregX_prev[14] !== iregX_expected_prev[14] )
		&& ((iregX_expected_prev[14] !== last_iregX_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[14] = iregX_expected_prev[14];
	end
	if (
		( iregX_expected_prev[15] !== 1'bx ) && ( iregX_prev[15] !== iregX_expected_prev[15] )
		&& ((iregX_expected_prev[15] !== last_iregX_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port iregX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", iregX_expected_prev);
		$display ("     Real value = %b", iregX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_iregX_exp[15] = iregX_expected_prev[15];
	end
	if (
		( mem_enX_expected_prev !== 1'bx ) && ( mem_enX_prev !== mem_enX_expected_prev )
		&& ((mem_enX_expected_prev !== last_mem_enX_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_enX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_enX_expected_prev);
		$display ("     Real value = %b", mem_enX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_mem_enX_exp = mem_enX_expected_prev;
	end
	if (
		( mem_rwX_expected_prev !== 1'bx ) && ( mem_rwX_prev !== mem_rwX_expected_prev )
		&& ((mem_rwX_expected_prev !== last_mem_rwX_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_rwX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_rwX_expected_prev);
		$display ("     Real value = %b", mem_rwX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_mem_rwX_exp = mem_rwX_expected_prev;
	end
	if (
		( pcX_expected_prev[0] !== 1'bx ) && ( pcX_prev[0] !== pcX_expected_prev[0] )
		&& ((pcX_expected_prev[0] !== last_pcX_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[0] = pcX_expected_prev[0];
	end
	if (
		( pcX_expected_prev[1] !== 1'bx ) && ( pcX_prev[1] !== pcX_expected_prev[1] )
		&& ((pcX_expected_prev[1] !== last_pcX_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[1] = pcX_expected_prev[1];
	end
	if (
		( pcX_expected_prev[2] !== 1'bx ) && ( pcX_prev[2] !== pcX_expected_prev[2] )
		&& ((pcX_expected_prev[2] !== last_pcX_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[2] = pcX_expected_prev[2];
	end
	if (
		( pcX_expected_prev[3] !== 1'bx ) && ( pcX_prev[3] !== pcX_expected_prev[3] )
		&& ((pcX_expected_prev[3] !== last_pcX_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[3] = pcX_expected_prev[3];
	end
	if (
		( pcX_expected_prev[4] !== 1'bx ) && ( pcX_prev[4] !== pcX_expected_prev[4] )
		&& ((pcX_expected_prev[4] !== last_pcX_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[4] = pcX_expected_prev[4];
	end
	if (
		( pcX_expected_prev[5] !== 1'bx ) && ( pcX_prev[5] !== pcX_expected_prev[5] )
		&& ((pcX_expected_prev[5] !== last_pcX_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[5] = pcX_expected_prev[5];
	end
	if (
		( pcX_expected_prev[6] !== 1'bx ) && ( pcX_prev[6] !== pcX_expected_prev[6] )
		&& ((pcX_expected_prev[6] !== last_pcX_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[6] = pcX_expected_prev[6];
	end
	if (
		( pcX_expected_prev[7] !== 1'bx ) && ( pcX_prev[7] !== pcX_expected_prev[7] )
		&& ((pcX_expected_prev[7] !== last_pcX_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[7] = pcX_expected_prev[7];
	end
	if (
		( pcX_expected_prev[8] !== 1'bx ) && ( pcX_prev[8] !== pcX_expected_prev[8] )
		&& ((pcX_expected_prev[8] !== last_pcX_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[8] = pcX_expected_prev[8];
	end
	if (
		( pcX_expected_prev[9] !== 1'bx ) && ( pcX_prev[9] !== pcX_expected_prev[9] )
		&& ((pcX_expected_prev[9] !== last_pcX_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[9] = pcX_expected_prev[9];
	end
	if (
		( pcX_expected_prev[10] !== 1'bx ) && ( pcX_prev[10] !== pcX_expected_prev[10] )
		&& ((pcX_expected_prev[10] !== last_pcX_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[10] = pcX_expected_prev[10];
	end
	if (
		( pcX_expected_prev[11] !== 1'bx ) && ( pcX_prev[11] !== pcX_expected_prev[11] )
		&& ((pcX_expected_prev[11] !== last_pcX_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[11] = pcX_expected_prev[11];
	end
	if (
		( pcX_expected_prev[12] !== 1'bx ) && ( pcX_prev[12] !== pcX_expected_prev[12] )
		&& ((pcX_expected_prev[12] !== last_pcX_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[12] = pcX_expected_prev[12];
	end
	if (
		( pcX_expected_prev[13] !== 1'bx ) && ( pcX_prev[13] !== pcX_expected_prev[13] )
		&& ((pcX_expected_prev[13] !== last_pcX_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[13] = pcX_expected_prev[13];
	end
	if (
		( pcX_expected_prev[14] !== 1'bx ) && ( pcX_prev[14] !== pcX_expected_prev[14] )
		&& ((pcX_expected_prev[14] !== last_pcX_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[14] = pcX_expected_prev[14];
	end
	if (
		( pcX_expected_prev[15] !== 1'bx ) && ( pcX_prev[15] !== pcX_expected_prev[15] )
		&& ((pcX_expected_prev[15] !== last_pcX_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcX_expected_prev);
		$display ("     Real value = %b", pcX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcX_exp[15] = pcX_expected_prev[15];
	end
	if (
		( tX_expected_prev[0] !== 1'bx ) && ( tX_prev[0] !== tX_expected_prev[0] )
		&& ((tX_expected_prev[0] !== last_tX_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tX_expected_prev);
		$display ("     Real value = %b", tX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tX_exp[0] = tX_expected_prev[0];
	end
	if (
		( tX_expected_prev[1] !== 1'bx ) && ( tX_prev[1] !== tX_expected_prev[1] )
		&& ((tX_expected_prev[1] !== last_tX_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tX_expected_prev);
		$display ("     Real value = %b", tX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tX_exp[1] = tX_expected_prev[1];
	end
	if (
		( tX_expected_prev[2] !== 1'bx ) && ( tX_prev[2] !== tX_expected_prev[2] )
		&& ((tX_expected_prev[2] !== last_tX_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tX_expected_prev);
		$display ("     Real value = %b", tX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tX_exp[2] = tX_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_ON_DE0_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [15:0] aBusX;
wire [15:0] accX;
wire [15:0] aluX;
wire [15:0] dBusX;
wire [15:0] iarX;
wire [15:0] iregX;
wire mem_enX;
wire mem_rwX;
wire [15:0] pcX;
wire [2:0] tX;

wire sampler;                             

// assign statements (if any)                          
CPU_ON_DE0 i1 (
// port map - connection between master ports and signals/registers   
	.aBusX(aBusX),
	.accX(accX),
	.aluX(aluX),
	.clk(clk),
	.dBusX(dBusX),
	.iarX(iarX),
	.iregX(iregX),
	.mem_enX(mem_enX),
	.mem_rwX(mem_rwX),
	.pcX(pcX),
	.reset(reset),
	.tX(tX)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
end 

CPU_ON_DE0_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

CPU_ON_DE0_vlg_check_tst tb_out(
	.aBusX(aBusX),
	.accX(accX),
	.aluX(aluX),
	.dBusX(dBusX),
	.iarX(iarX),
	.iregX(iregX),
	.mem_enX(mem_enX),
	.mem_rwX(mem_rwX),
	.pcX(pcX),
	.tX(tX),
	.sampler_rx(sampler)
);
endmodule

