// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2023 07:45:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vhdl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vhdl_vlg_sample_tst(
	aa,
	bb,
	cii,
	mm,
	sampler_tx
);
input [3:0] aa;
input [3:0] bb;
input  cii;
input  mm;
output sampler_tx;

reg sample;
time current_time;
always @(aa or bb or cii or mm)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vhdl_vlg_check_tst (
	coo,
	ss,
	sampler_rx
);
input  coo;
input [3:0] ss;
input sampler_rx;

reg  coo_expected;
reg [3:0] ss_expected;

reg  coo_prev;
reg [3:0] ss_prev;

reg  coo_expected_prev;
reg [3:0] ss_expected_prev;

reg  last_coo_exp;
reg [3:0] last_ss_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	coo_prev = coo;
	ss_prev = ss;
end

// update expected /o prevs

always @(trigger)
begin
	coo_expected_prev = coo_expected;
	ss_expected_prev = ss_expected;
end



// expected coo
initial
begin
	coo_expected = 1'bX;
end 
// expected ss[ 3 ]
initial
begin
	ss_expected[3] = 1'bX;
end 
// expected ss[ 2 ]
initial
begin
	ss_expected[2] = 1'bX;
end 
// expected ss[ 1 ]
initial
begin
	ss_expected[1] = 1'bX;
end 
// expected ss[ 0 ]
initial
begin
	ss_expected[0] = 1'bX;
end 
// generate trigger
always @(coo_expected or coo or ss_expected or ss)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected coo = %b | expected ss = %b | ",coo_expected_prev,ss_expected_prev);
	$display("| real coo = %b | real ss = %b | ",coo_prev,ss_prev);
`endif
	if (
		( coo_expected_prev !== 1'bx ) && ( coo_prev !== coo_expected_prev )
		&& ((coo_expected_prev !== last_coo_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coo_expected_prev);
		$display ("     Real value = %b", coo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coo_exp = coo_expected_prev;
	end
	if (
		( ss_expected_prev[0] !== 1'bx ) && ( ss_prev[0] !== ss_expected_prev[0] )
		&& ((ss_expected_prev[0] !== last_ss_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ss[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ss_expected_prev);
		$display ("     Real value = %b", ss_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ss_exp[0] = ss_expected_prev[0];
	end
	if (
		( ss_expected_prev[1] !== 1'bx ) && ( ss_prev[1] !== ss_expected_prev[1] )
		&& ((ss_expected_prev[1] !== last_ss_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ss[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ss_expected_prev);
		$display ("     Real value = %b", ss_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ss_exp[1] = ss_expected_prev[1];
	end
	if (
		( ss_expected_prev[2] !== 1'bx ) && ( ss_prev[2] !== ss_expected_prev[2] )
		&& ((ss_expected_prev[2] !== last_ss_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ss[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ss_expected_prev);
		$display ("     Real value = %b", ss_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ss_exp[2] = ss_expected_prev[2];
	end
	if (
		( ss_expected_prev[3] !== 1'bx ) && ( ss_prev[3] !== ss_expected_prev[3] )
		&& ((ss_expected_prev[3] !== last_ss_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ss[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ss_expected_prev);
		$display ("     Real value = %b", ss_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ss_exp[3] = ss_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vhdl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] aa;
reg [3:0] bb;
reg cii;
reg mm;
// wires                                               
wire coo;
wire [3:0] ss;

wire sampler;                             

// assign statements (if any)                          
vhdl i1 (
// port map - connection between master ports and signals/registers   
	.aa(aa),
	.bb(bb),
	.cii(cii),
	.coo(coo),
	.mm(mm),
	.ss(ss)
);
// aa[ 3 ]
initial
begin
	aa[3] = 1'b0;
	aa[3] = #400000 1'b1;
	aa[3] = #400000 1'b0;
end 
// aa[ 2 ]
initial
begin
	repeat(2)
	begin
		aa[2] = 1'b0;
		aa[2] = #200000 1'b1;
		# 200000;
	end
	aa[2] = 1'b0;
end 
// aa[ 1 ]
always
begin
	aa[1] = 1'b0;
	aa[1] = #100000 1'b1;
	#100000;
end 
// aa[ 0 ]
always
begin
	aa[0] = 1'b0;
	aa[0] = #50000 1'b1;
	#50000;
end 
// bb[ 3 ]
initial
begin
	bb[3] = 1'b0;
end 
// bb[ 2 ]
initial
begin
	bb[2] = 1'b0;
end 
// bb[ 1 ]
initial
begin
	bb[1] = 1'b0;
end 
// bb[ 0 ]
initial
begin
	bb[0] = 1'b1;
end 

// cii
initial
begin
	cii = 1'b0;
end 

// mm
initial
begin
	mm = 1'b0;
	mm = #160000 1'b1;
	mm = #150000 1'b0;
end 

vhdl_vlg_sample_tst tb_sample (
	.aa(aa),
	.bb(bb),
	.cii(cii),
	.mm(mm),
	.sampler_tx(sampler)
);

vhdl_vlg_check_tst tb_out(
	.coo(coo),
	.ss(ss),
	.sampler_rx(sampler)
);
endmodule

